definitions:
  dto.AddressOutput:
    properties:
      city:
        type: string
      country:
        type: string
      region:
        type: string
      street1:
        type: string
      street2:
        type: string
      zip:
        type: string
    type: object
  dto.CategoryRequest:
    properties:
      name:
        maxLength: 50
        minLength: 2
        type: string
      type:
        maxLength: 50
        minLength: 2
        type: string
    required:
    - name
    - type
    type: object
  dto.CategoryResponse:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  dto.DeviceRequest:
    properties:
      category:
        type: string
      description:
        type: string
      deviceId:
        maxLength: 50
        minLength: 3
        type: string
      deviceName:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - deviceId
    - deviceName
    type: object
  dto.DeviceResponse:
    properties:
      category:
        type: string
      createdAt:
        type: string
      description:
        type: string
      deviceId:
        type: string
      deviceName:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      code:
        type: string
      error:
        type: string
      success:
        type: boolean
    type: object
  dto.PolicyAttachRequest:
    properties:
      identityId:
        type: string
    required:
    - identityId
    type: object
  dto.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.SensorDataRequest:
    properties:
      dateMode:
        enum:
        - hourly
        - daily
        - weekly
        - monthly
        - yearly
        type: string
      deviceMacId:
        type: string
      timestamp:
        type: string
    required:
    - dateMode
    - deviceMacId
    - timestamp
    type: object
  dto.SensorDataResponse:
    properties:
      amperage:
        type: string
      humidity:
        type: string
      temperature:
        type: string
      timestamp:
        type: integer
    type: object
  dto.UserDetailsRequest:
    properties:
      city:
        type: string
      country:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      parentId:
        type: string
      phone:
        type: string
      region:
        type: string
      street1:
        type: string
      street2:
        type: string
      zip:
        type: string
    required:
    - city
    - country
    - email
    - firstName
    - lastName
    - phone
    - region
    - street1
    - zip
    type: object
  dto.UserResponse:
    properties:
      address:
        $ref: '#/definitions/dto.AddressOutput'
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      parentId:
        type: string
      phone:
        type: string
    type: object
info:
  contact: {}
paths:
  /category/add:
    post:
      consumes:
      - application/json
      description: Register a new category
      parameters:
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Category added successfully
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Category already exists
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Add a new category
      tags:
      - Category Management
  /category/all:
    get:
      description: Retrieve all categories
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            items:
              $ref: '#/definitions/dto.CategoryResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all categories
      tags:
      - Category Management
  /category/type/{type}:
    get:
      consumes:
      - application/json
      description: Retrieve all categories of a specific type
      parameters:
      - description: Category type
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            items:
              $ref: '#/definitions/dto.CategoryResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get categories by type
      tags:
      - Category Management
  /device/add:
    post:
      consumes:
      - application/json
      description: Register a new IoT device for the authenticated user
      parameters:
      - description: User ID
        in: header
        name: X-User-ID
        required: true
        type: string
      - description: Device information
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/dto.DeviceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Device added successfully
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add a new device
      tags:
      - Device Management
  /device/attach-policy:
    post:
      consumes:
      - application/json
      description: Attach an AWS IoT policy to a Cognito identity
      parameters:
      - description: Identity information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PolicyAttachRequest'
      produces:
      - application/json
      responses:
        "200":
          description: IoT policy attached successfully
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Invalid request or validation error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to attach IoT policy
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Attach IoT policy
      tags:
      - Policy Management
  /device/sensor-data:
    post:
      consumes:
      - application/json
      description: Retrieve sensor data for a specific device with time filtering
      parameters:
      - description: Request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SensorDataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Sensor data for the device
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.SensorDataResponse'
                  type: array
              type: object
        "400":
          description: Invalid request or validation error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get device sensor data
      tags:
      - Device Data
  /user/check-parent-id:
    get:
      description: Checks if the authenticated user has a parent ID set in their profile
      parameters:
      - description: User ID
        in: header
        name: X-User-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns has_parent_id flag
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Error when user ID is not found in context
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Error when checking parent ID fails
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Check if user has parent ID
      tags:
      - User Management
  /user/details:
    get:
      consumes:
      - application/json
      description: Retrieve authenticated user's profile information
      parameters:
      - description: User ID
        in: header
        name: X-User-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user details
      tags:
      - User Management
    post:
      consumes:
      - application/json
      description: Update the authenticated user's profile information
      parameters:
      - description: User ID
        in: header
        name: X-User-ID
        required: true
        type: string
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDetailsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User details updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user details
      tags:
      - User Management
  /user/devices:
    get:
      consumes:
      - application/json
      description: Get all devices registered to the authenticated user
      parameters:
      - description: User ID
        in: header
        name: X-User-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user devices
          schema:
            items:
              $ref: '#/definitions/dto.DeviceResponse'
            type: array
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List user devices
      tags:
      - Device Management
swagger: "2.0"
