// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/category/add": {
            "post": {
                "description": "Register a new category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category Management"
                ],
                "summary": "Add a new category",
                "parameters": [
                    {
                        "description": "Category information",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Category added successfully",
                        "schema": {
                            "$ref": "#/definitions/gin.Response"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Category already exists",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/category/all": {
            "get": {
                "description": "Retrieve all categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category Management"
                ],
                "summary": "Get all categories",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CategoryResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/category/type/{type}": {
            "get": {
                "description": "Retrieve all categories of a specific type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category Management"
                ],
                "summary": "Get categories by type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category type",
                        "name": "type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CategoryResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/device/add": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Register a new IoT device for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device Management"
                ],
                "summary": "Add a new device",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Device information",
                        "name": "device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddDeviceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Device added successfully",
                        "schema": {
                            "$ref": "#/definitions/gin.Response"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/device/attach-policy": {
            "post": {
                "description": "Attach an AWS IoT policy to a Cognito identity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy Management"
                ],
                "summary": "Attach IoT policy",
                "parameters": [
                    {
                        "description": "Identity information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AttachIotPolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IoT policy attached successfully",
                        "schema": {
                            "$ref": "#/definitions/gin.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to attach IoT policy",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/device/sensor-data": {
            "post": {
                "description": "Retrieve sensor data for a specific device with time filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device Data"
                ],
                "summary": "Get device sensor data",
                "parameters": [
                    {
                        "description": "Request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GetDeviceSensorDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sensor data for the device",
                        "schema": {
                            "$ref": "#/definitions/models.GetDeviceSensorDataResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/check-parent-id": {
            "get": {
                "description": "Checks if the authenticated user has a parent ID set in their profile",
                "produces": [
                    "application/json"
                ],
                "summary": "Check if user has parent ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns has_parent_id flag",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Error when user ID is not found in context",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error when checking parent ID fails",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user/details": {
            "get": {
                "description": "Retrieves the user details for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No user details found (null response)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Error when user is not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error when retrieving user details fails",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Updates or adds user details for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User details information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserDetailsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error when request validation fails",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Error when user is not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error when updating user details fails",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user/devices": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all devices registered to the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device Management"
                ],
                "summary": "List user devices",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user devices",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DeviceResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gin.ErrorResponse": {
            "description": "Standard API error response format",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Something went wrong"
                },
                "status": {
                    "description": "Always false for errors",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "gin.Response": {
            "description": "Standard API success response format",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Optional data payload"
                },
                "message": {
                    "description": "Optional success message",
                    "type": "string",
                    "example": "Operation successful"
                },
                "status": {
                    "description": "Indicates success status",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.AddCategoryRequest": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "type": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                }
            }
        },
        "models.AddDeviceRequest": {
            "type": "object",
            "required": [
                "deviceId",
                "deviceName"
            ],
            "properties": {
                "deviceId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "deviceName": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "models.AttachIotPolicyRequest": {
            "type": "object",
            "required": [
                "identityId"
            ],
            "properties": {
                "identityId": {
                    "type": "string"
                }
            }
        },
        "models.CategoryResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.DeviceResponse": {
            "type": "object",
            "properties": {
                "device_name": {
                    "type": "string"
                },
                "mac_address": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.GetDeviceSensorDataRequest": {
            "type": "object",
            "required": [
                "dateMode",
                "deviceMacId",
                "timestamp"
            ],
            "properties": {
                "dateMode": {
                    "type": "string",
                    "enum": [
                        "hourly",
                        "daily",
                        "weekly",
                        "monthly",
                        "yearly"
                    ]
                },
                "deviceMacId": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.GetDeviceSensorDataResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SensorData"
                    }
                }
            }
        },
        "models.SensorData": {
            "type": "object",
            "properties": {
                "amperage": {
                    "type": "string"
                },
                "humidity": {
                    "type": "string"
                },
                "temperature": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "models.UserDetails": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "street1": {
                    "type": "string"
                },
                "street2": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            }
        },
        "models.UserDetailsRequest": {
            "type": "object",
            "required": [
                "city",
                "country",
                "email",
                "firstName",
                "lastName",
                "phone",
                "region",
                "street1",
                "zip"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "street1": {
                    "type": "string"
                },
                "street2": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
